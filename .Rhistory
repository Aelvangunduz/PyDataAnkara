trainControl = fitControl,
tuneGrid = svmGrid)
# Print CV performance
svm.rbf
svmGrid <-  expand.grid('sigma' = seq(from = 0.01, to = 0.1, by = 0.01),
'C' = c(0.3,1,3)
)
# Set parameter grid
svmGrid <-  expand.grid('sigma' = seq(from = 0.01, to = 0.1, by = 0.01),
'C' = c(0.3,1,3))
# Train SVM
svm.rbf <- train(NSP~., data = data, method ='svmRadial',
trainControl = fitControl,
tuneGrid = svmGrid)
# Print CV performance
svm.rbf
# Set parameter grid
svmGrid <-  expand.grid('sigma' = seq(from = 0.05, to = 0.06, by = 0.001),
'C' = c(3,4,5))
# Train SVM
svm.rbf <- train(NSP~., data = data, method ='svmRadial',
trainControl = fitControl,
tuneGrid = svmGrid)
# Print CV performance
svm.rbf
svm.rbf <- ksvm(NSP~., data = data, kernel = 'rbfdot', kpar = list('sigma' = 0.1))
svm.rbf
rbf.pred <- predict(svm.rbf, data[,-ncol(data)])
(rbfConf <- confusionMatrix(rbf.pred, data[,ncol(data)], positive = "+"))
svm.rbf <- ksvm(NSP~., data = data, kernel = 'rbfdot', kpar = list('sigma' = 0.6))
svm.rbf
rbf.pred <- predict(svm.rbf, data[,-ncol(data)])
(rbfConf <- confusionMatrix(rbf.pred, data[,ncol(data)], positive = "+"))
svm.rbf <- ksvm(NSP~., data = data, kernel = 'rbfdot', kpar = list('sigma' = 0.3))
svm.rbf
rbf.pred <- predict(svm.rbf, data[,-ncol(data)])
(rbfConf <- confusionMatrix(rbf.pred, data[,ncol(data)], positive = "+"))
svmGrid <-  expand.grid('sigma' = 0.1,
'C' = 1)
svm.rbf <- train(NSP~., data = data, method ='svmRadial',
trainControl = fitControl,
tuneGrid = svmGrid)
svm.rbf
warnings()
svm.linear <- train(NSP~., data = data, method ='svmLinear2',
trainControl = fitControl)
?trainControl
View(data)
svmGrid <-  expand.grid('sigma' = 0.6,
'C' = 1)
svm.rbf <- train(NSP~., data = data, method ='svmRadial',
trainControl = fitControl,
tuneGrid = svmGrid)
svm.rbf
svm.linear <- train(NSP~., data = data, method ='svmLinear2',
trainControl = fitControl)
svm.linear
svm.linear <- svm(NSP~., data = data, type ='C', kernel = 'linear')
svm.linear
(linearConf <- confusionMatrix(linear.pred, data[,ncol(data)], positive = "+"))
(rbfConf <- confusionMatrix(rbf.pred, data[,ncol(data)], positive = "+"))
(linearConf <- confusionMatrix(linear.pred, data[,ncol(data)], positive = "+"))
setwd('~/Desktop/PyData')
library(dplyr)
library(ggplot2)
frankfurt <- read.csv('frankfurt_final.csv')
shanghai <- read.csv('shanghai_final.csv')
manila <- read.csv('manila_final.csv')
# Visualization
# Density plot to see farm distribution between regions and positions
g <- ggplot(data = frankfurt, aes(x = GPM, color = Region))
g + geom_density() + facet_grid(Position ~.)
# Density plot to see exp distribution between regions and positions
g <- ggplot(data = frankfurt, aes(x = XPM, color = Region))
g + geom_density() + facet_grid(Position ~.)
# Doesn't really tell us much because of graphical scaling, let's apply actual scaling
# We want to see if there are any differences based on region, so we scale based on the Positions
XGPM_scale <- function(x){
x$GPM <- as.vector(scale(x$GPM))
x$XPM <- as.vector(scale(x$XPM))
return(x)
}
fix_dataframes <- function(x){
x_scaled <- split(x, as.factor(x$Position))
x_scaled <- lapply(x_scaled, XGPM_scale)
x_scaled <- rbind(x_scaled[[1]], x_scaled[[2]],
x_scaled[[3]], x_scaled[[4]], x_scaled[[5]])
x_scaled <- arrange(x_scaled, Team, Position)
return(x_scaled)
}
scaled_frankfurt <- fix_dataframes(frankfurt)
# Density plot to see farm distribution between regions and positions
g <- ggplot(data = scaled_frankfurt, aes(x = GPM, color = Region))
g + geom_density() + facet_grid(Position ~.)
# Density plot to see exp distribution between regions and positions
g <- ggplot(data = scaled_frankfurt, aes(x = XPM, color = Region))
g + geom_density() + facet_grid(Position ~.)
# Subset the data so that we retain only the teams that participated in the main event
main_event_frankfurt <- scaled_frankfurt[frankfurt$Tournament_Result > 0,]
# Density plot to see farm distribution between regions and positions
g <- ggplot(data = main_event_frankfurt, aes(x = GPM, color = Region))
g + geom_density()  + facet_grid(Position ~.)
# Density plot to see exp distribution between regions and positions
g <- ggplot(data = main_event_frankfurt, aes(x = XPM, color = Region))
g + geom_density() + facet_grid(Position ~.)
# Let's see how GPM differs between teams that participated in the main event and the teams that hadnt
scaled_frankfurt2 <- scaled_frankfurt
scaled_frankfurt2$Participation <- scaled_frankfurt$Tournament_Result>0
g <- ggplot(data = scaled_frankfurt2, aes(x = GPM, color = Participation))
g + geom_density() + facet_grid(Region ~.)
# Let's do the same thing for shanghai and manila and then combine them together for a more complete view
scaled_shanghai <- fix_dataframes(shanghai)
scaled_manila <- fix_dataframes(manila)
scaled_tournaments <- rbind(scaled_frankfurt[,1:18], scaled_shanghai[,1:18], scaled_manila)
# Density plot to see farm distribution between regions and positions
g <- ggplot(data = scaled_tournaments, aes(x = GPM, color = Region))
g + geom_density()  + facet_grid(Position ~.)
# Density plot to see exp distribution between regions and positions
g <- ggplot(data = scaled_tournaments, aes(x = XPM, color = Region))
g + geom_density() + facet_grid(Position ~.)
# Let's see how GPM differs between teams that participated in the main event and the teams that hadnt
scaled_tournaments2 <- scaled_tournaments
scaled_tournaments2$Participation <- scaled_tournaments$Tournament_Result>0
g <- ggplot(data = scaled_tournaments2, aes(x = GPM, color = Participation))
g + geom_density() + facet_grid(Region ~.)
# Scatterplot
# To observe the dual relatipnship between variables
g <- ggplot(data = scaled_tournaments2, aes(x = XPM, y= GPM, color = Participation))
g + geom_point() + facet_grid(Position ~.)
# What if we hadn't scaled?
tournaments <- rbind(frankfurt[,1:18], shanghai[,1:18], manila)
tournaments2 <- tournaments
tournaments2$Participation <- tournaments$Tournament_Result>0
g <- ggplot(data = tournaments2, aes(x = XPM, y= GPM, color = Participation))
g + geom_point() + facet_grid(Position ~.)
View(scaled_tournaments)
setwd('C:/Users/Elvan/Desktop/PyData')
library(dplyr)
library(ggplot2)
frankfurt <- read.csv('frankfurt_final.csv')
shanghai <- read.csv('shanghai_final.csv')
manila <- read.csv('manila_final.csv')
# Visualization
# Density plot to see farm distribution between regions and positions
g <- ggplot(data = frankfurt, aes(x = GPM, color = Region))
g + geom_density() + facet_grid(Position ~.)
# Density plot to see exp distribution between regions and positions
g <- ggplot(data = frankfurt, aes(x = XPM, color = Region))
g + geom_density() + facet_grid(Position ~.)
# Doesn't really tell us much because of graphical scaling, let's apply actual scaling
# We want to see if there are any differences based on region, so we scale based on the Positions
XGPM_scale <- function(x){
x$GPM <- as.vector(scale(x$GPM))
x$XPM <- as.vector(scale(x$XPM))
return(x)
}
fix_dataframes <- function(x){
x_scaled <- split(x, as.factor(x$Position))
x_scaled <- lapply(x_scaled, XGPM_scale)
x_scaled <- rbind(x_scaled[[1]], x_scaled[[2]],
x_scaled[[3]], x_scaled[[4]], x_scaled[[5]])
x_scaled <- arrange(x_scaled, Team, Position)
return(x_scaled)
}
scaled_frankfurt <- fix_dataframes(frankfurt)
# Density plot to see farm distribution between regions and positions
g <- ggplot(data = scaled_frankfurt, aes(x = GPM, color = Region))
g + geom_density() + facet_grid(Position ~.)
# Density plot to see exp distribution between regions and positions
g <- ggplot(data = scaled_frankfurt, aes(x = XPM, color = Region))
g + geom_density() + facet_grid(Position ~.)
# Subset the data so that we retain only the teams that participated in the main event
main_event_frankfurt <- scaled_frankfurt[frankfurt$Tournament_Result > 0,]
# Density plot to see farm distribution between regions and positions
g <- ggplot(data = main_event_frankfurt, aes(x = GPM, color = Region))
g + geom_density()  + facet_grid(Position ~.)
# Density plot to see exp distribution between regions and positions
g <- ggplot(data = main_event_frankfurt, aes(x = XPM, color = Region))
g + geom_density() + facet_grid(Position ~.)
# Let's see how GPM differs between teams that participated in the main event and the teams that hadnt
scaled_frankfurt2 <- scaled_frankfurt
scaled_frankfurt2$Participation <- scaled_frankfurt$Tournament_Result>0
g <- ggplot(data = scaled_frankfurt2, aes(x = GPM, color = Participation))
g + geom_density() + facet_grid(Region ~.)
# Let's do the same thing for shanghai and manila and then combine them together for a more complete view
scaled_shanghai <- fix_dataframes(shanghai)
scaled_manila <- fix_dataframes(manila)
scaled_tournaments <- rbind(scaled_frankfurt[,1:18], scaled_shanghai[,1:18], scaled_manila)
# Density plot to see farm distribution between regions and positions
g <- ggplot(data = scaled_tournaments, aes(x = GPM, color = Region))
g + geom_density()  + facet_grid(Position ~.)
# Density plot to see exp distribution between regions and positions
g <- ggplot(data = scaled_tournaments, aes(x = XPM, color = Region))
g + geom_density() + facet_grid(Position ~.)
# Let's see how GPM differs between teams that participated in the main event and the teams that hadnt
scaled_tournaments2 <- scaled_tournaments
scaled_tournaments2$Participation <- scaled_tournaments$Tournament_Result>0
g <- ggplot(data = scaled_tournaments2, aes(x = GPM, color = Participation))
g + geom_density() + facet_grid(Region ~.)
# Scatterplot
# To observe the dual relatipnship between variables
g <- ggplot(data = scaled_tournaments2, aes(x = XPM, y= GPM, color = Participation))
g + geom_point() + facet_grid(Position ~.)
# What if we hadn't scaled?
tournaments <- rbind(frankfurt[,1:18], shanghai[,1:18], manila)
tournaments2 <- tournaments
tournaments2$Participation <- tournaments$Tournament_Result>0
g <- ggplot(data = tournaments2, aes(x = XPM, y= GPM, color = Participation))
g + geom_point() + facet_grid(Position ~.)
install.packages("dplyr")
library(dplyr)
library(ggplot2)
frankfurt <- read.csv('frankfurt_final.csv')
shanghai <- read.csv('shanghai_final.csv')
manila <- read.csv('manila_final.csv')
# Visualization
# Density plot to see farm distribution between regions and positions
g <- ggplot(data = frankfurt, aes(x = GPM, color = Region))
g + geom_density() + facet_grid(Position ~.)
# Density plot to see exp distribution between regions and positions
g <- ggplot(data = frankfurt, aes(x = XPM, color = Region))
g + geom_density() + facet_grid(Position ~.)
# Doesn't really tell us much because of graphical scaling, let's apply actual scaling
# We want to see if there are any differences based on region, so we scale based on the Positions
XGPM_scale <- function(x){
x$GPM <- as.vector(scale(x$GPM))
x$XPM <- as.vector(scale(x$XPM))
return(x)
}
fix_dataframes <- function(x){
x_scaled <- split(x, as.factor(x$Position))
x_scaled <- lapply(x_scaled, XGPM_scale)
x_scaled <- rbind(x_scaled[[1]], x_scaled[[2]],
x_scaled[[3]], x_scaled[[4]], x_scaled[[5]])
x_scaled <- arrange(x_scaled, Team, Position)
return(x_scaled)
}
scaled_frankfurt <- fix_dataframes(frankfurt)
# Density plot to see farm distribution between regions and positions
g <- ggplot(data = scaled_frankfurt, aes(x = GPM, color = Region))
g + geom_density() + facet_grid(Position ~.)
# Density plot to see exp distribution between regions and positions
g <- ggplot(data = scaled_frankfurt, aes(x = XPM, color = Region))
g + geom_density() + facet_grid(Position ~.)
# Subset the data so that we retain only the teams that participated in the main event
main_event_frankfurt <- scaled_frankfurt[frankfurt$Tournament_Result > 0,]
# Density plot to see farm distribution between regions and positions
g <- ggplot(data = main_event_frankfurt, aes(x = GPM, color = Region))
g + geom_density()  + facet_grid(Position ~.)
# Density plot to see exp distribution between regions and positions
g <- ggplot(data = main_event_frankfurt, aes(x = XPM, color = Region))
g + geom_density() + facet_grid(Position ~.)
# Let's see how GPM differs between teams that participated in the main event and the teams that hadnt
scaled_frankfurt2 <- scaled_frankfurt
scaled_frankfurt2$Participation <- scaled_frankfurt$Tournament_Result>0
g <- ggplot(data = scaled_frankfurt2, aes(x = GPM, color = Participation))
g + geom_density() + facet_grid(Region ~.)
# Let's do the same thing for shanghai and manila and then combine them together for a more complete view
scaled_shanghai <- fix_dataframes(shanghai)
scaled_manila <- fix_dataframes(manila)
scaled_tournaments <- rbind(scaled_frankfurt[,1:18], scaled_shanghai[,1:18], scaled_manila)
# Density plot to see farm distribution between regions and positions
g <- ggplot(data = scaled_tournaments, aes(x = GPM, color = Region))
g + geom_density()  + facet_grid(Position ~.)
# Density plot to see exp distribution between regions and positions
g <- ggplot(data = scaled_tournaments, aes(x = XPM, color = Region))
g + geom_density() + facet_grid(Position ~.)
# Let's see how GPM differs between teams that participated in the main event and the teams that hadnt
scaled_tournaments2 <- scaled_tournaments
scaled_tournaments2$Participation <- scaled_tournaments$Tournament_Result>0
g <- ggplot(data = scaled_tournaments2, aes(x = GPM, color = Participation))
g + geom_density() + facet_grid(Region ~.)
# Scatterplot
# To observe the dual relatipnship between variables
g <- ggplot(data = scaled_tournaments2, aes(x = XPM, y= GPM, color = Participation))
g + geom_point() + facet_grid(Position ~.)
# What if we hadn't scaled?
tournaments <- rbind(frankfurt[,1:18], shanghai[,1:18], manila)
tournaments2 <- tournaments
tournaments2$Participation <- tournaments$Tournament_Result>0
g <- ggplot(data = tournaments2, aes(x = XPM, y= GPM, color = Participation))
g + geom_point() + facet_grid(Position ~.)
View(tournaments)
numeric_vars <- which(sapply(tournaments, is.numeric))
pc <- cor(tournaments[,numeric_vars])
View(pc)
library(corrgram)
corrgram(tournaments[,numeric_vars], order = FALSE, lower.panel=panel.shade,
upper.panel=panel.pie, text.panel=panel.txt,
main="Dota2 Valve Tournament Results in 2015-2016")
View(tournaments)
library(caret)
train_indexes <- sample(1:nrow(tournaments), 0.75)
?sample
train_indexes <- sample(1:nrow(tournaments), prob = 0.75)
train_indexes <- sample(1:nrow(tournaments), 0.75*nrow(tournaments))
train_indexes <- sort(sample(1:nrow(tournaments), 0.75*nrow(tournaments)))
linm1 <- glm(Tournament_Result ~., data = tournaments)
linm
linm1
linm1 <- glm(Tournament_Result ~., data = train_data)
train_data <- tournaments[train_indexes, -c(1,2)]
test_data <- tournaments[-train_indexes, -c(1,2)]
linm1 <- glm(Tournament_Result ~., data = train_data)
linm1
summary(linm1)
?glm
linm1 <- glm(Tournament_Result ~., data = train_data, intercept = F)
linm1 <- glm(Tournament_Result ~. -1, data = train_data)
summary(linm1)
View(test_data)
preds1 <- predict(linm1, test_data[,-14])
library(caret)
train_indexes <- createDataPartition(tournaments$Tournament_Result, p = .75, list = F)
train_data <- tournaments[train_indexes, -c(1,2)]
test_data <- tournaments[-train_indexes, -c(1,2)]
model1 <- train(Tournament_Result~. ,
data = train_data,
method = 'rf',
trControl = fitControl,
verbose = F)
train_indexes <- createDataPartition(tournaments$Tournament_Result, p = .75, list = F)
train_data <- tournaments[train_indexes, -c(1,2)]
test_data <- tournaments[-train_indexes, -c(1,2)]
fitControl <- trainControl(method = 'repeatedcv',
number = 10,
repeats = 10)
model1 <- train(Tournament_Result~. ,
data = train_data,
method = 'rf',
trControl = fitControl,
verbose = F)
model1 <- train(Tournament_Result~. ,
data = train_data,
method = 'rf',
trControl = fitControl,
verbose = T)
model1 <- train(Tournament_Result~. ,
data = train_data,
method = 'gbm',
trControl = fitControl,
verbose = T)
model1
preds1 <- predict(model1, test_data[,-14])
preds1_integer <- round(preds1)
actual_results <- test_data$Tournament_Result
results_comparison <- data.frame(actual_results, preds1_integer)
View(results_comparison)
preds1_integer[preds1_integer<0] <- 0
results_comparison <- data.frame(actual_results, preds1_integer)
qplot(results_comparison$preds1_integer, results_comparison$actual_results)
setwd('C:/Users/Elvan/Desktop/PyData')
library(dplyr)
library(ggplot2)
library(corrgram)
library(caret)
frankfurt <- read.csv('frankfurt_final.csv')
shanghai <- read.csv('shanghai_final.csv')
manila <- read.csv('manila_final.csv')
# Visualization
# Density plot to see farm distribution between regions and positions
g <- ggplot(data = frankfurt, aes(x = GPM, color = Region))
g + geom_density() + facet_grid(Position ~.)
# Density plot to see exp distribution between regions and positions
g <- ggplot(data = frankfurt, aes(x = XPM, color = Region))
g + geom_density() + facet_grid(Position ~.)
# Doesn't really tell us much because of graphical scaling, let's apply actual scaling
# We want to see if there are any differences based on region, so we scale based on the Positions
XGPM_scale <- function(x){
x$GPM <- as.vector(scale(x$GPM))
x$XPM <- as.vector(scale(x$XPM))
return(x)
}
fix_dataframes <- function(x){
x_scaled <- split(x, as.factor(x$Position))
x_scaled <- lapply(x_scaled, XGPM_scale)
x_scaled <- rbind(x_scaled[[1]], x_scaled[[2]],
x_scaled[[3]], x_scaled[[4]], x_scaled[[5]])
x_scaled <- arrange(x_scaled, Team, Position)
return(x_scaled)
}
scaled_frankfurt <- fix_dataframes(frankfurt)
# Density plot to see farm distribution between regions and positions
g <- ggplot(data = scaled_frankfurt, aes(x = GPM, color = Region))
g + geom_density() + facet_grid(Position ~.)
# Density plot to see exp distribution between regions and positions
g <- ggplot(data = scaled_frankfurt, aes(x = XPM, color = Region))
g + geom_density() + facet_grid(Position ~.)
# Subset the data so that we retain only the teams that participated in the main event
main_event_frankfurt <- scaled_frankfurt[frankfurt$Tournament_Result > 0,]
# Density plot to see farm distribution between regions and positions
g <- ggplot(data = main_event_frankfurt, aes(x = GPM, color = Region))
g + geom_density()  + facet_grid(Position ~.)
# Density plot to see exp distribution between regions and positions
g <- ggplot(data = main_event_frankfurt, aes(x = XPM, color = Region))
g + geom_density() + facet_grid(Position ~.)
# Let's see how GPM differs between teams that participated in the main event and the teams that hadnt
scaled_frankfurt2 <- scaled_frankfurt
scaled_frankfurt2$Participation <- scaled_frankfurt$Tournament_Result>0
g <- ggplot(data = scaled_frankfurt2, aes(x = GPM, color = Participation))
g + geom_density() + facet_grid(Region ~.)
# Let's do the same thing for shanghai and manila and then combine them together for a more complete view
scaled_shanghai <- fix_dataframes(shanghai)
scaled_manila <- fix_dataframes(manila)
scaled_tournaments <- rbind(scaled_frankfurt[,1:18], scaled_shanghai[,1:18], scaled_manila)
# Density plot to see farm distribution between regions and positions
g <- ggplot(data = scaled_tournaments, aes(x = GPM, color = Region))
g + geom_density()  + facet_grid(Position ~.)
# Density plot to see exp distribution between regions and positions
g <- ggplot(data = scaled_tournaments, aes(x = XPM, color = Region))
g + geom_density() + facet_grid(Position ~.)
# Let's see how GPM differs between teams that participated in the main event and the teams that hadnt
scaled_tournaments2 <- scaled_tournaments
scaled_tournaments2$Participation <- scaled_tournaments$Tournament_Result>0
g <- ggplot(data = scaled_tournaments2, aes(x = GPM, color = Participation))
g + geom_density() + facet_grid(Region ~.)
# Scatterplot
# To observe the dual relatipnship between variables
g <- ggplot(data = scaled_tournaments2, aes(x = XPM, y= GPM, color = Participation))
g + geom_point() + facet_grid(Position ~.)
# What if we hadn't scaled?
tournaments <- rbind(frankfurt[,1:18], shanghai[,1:18], manila)
tournaments2 <- tournaments
tournaments2$Participation <- tournaments$Tournament_Result>0
g <- ggplot(data = tournaments2, aes(x = XPM, y= GPM, color = Participation))
g + geom_point() + facet_grid(Position ~.)
# Correlation
numeric_vars <- which(sapply(tournaments, is.numeric))
pc <- cor(tournaments[,numeric_vars])
corrgram(tournaments[,numeric_vars], order = FALSE, lower.panel=panel.shade,
upper.panel=panel.pie, text.panel=panel.txt,
main="Dota2 Valve Tournament Results in 2015-2016")
# Regression
# We don't want the Player and Team information because those are unique values and they will cause overfitting.
train_indexes <- createDataPartition(tournaments$Tournament_Result, p = .75, list = F)
train_data <- tournaments[train_indexes, -c(1,2)]
test_data <- tournaments[-train_indexes, -c(1,2)]
fitControl <- trainControl(method = 'repeatedcv',
number = 10,
repeats = 10)
model1 <- train(Tournament_Result~. ,
data = train_data,
method = 'gbm',
trControl = fitControl,
verbose = T)
model1
preds1 <- predict(model1, test_data[,-14])
preds1_integer <- round(preds1)
preds1_integer[preds1_integer<0] <- 0
actual_results <- test_data$Tournament_Result
results_comparison <- data.frame(actual_results, preds1_integer)
qplot(results_comparison$preds1_integer, results_comparison$actual_results)
View(results_comparison)
View(test_data)
View(tournaments)
team_names_test <- tournaments[-train_indexes, 2]
results_comparison$team_names <- team_names_test
View(results_comparison)
?aggregate
team_aggregates <- aggregate(results_comparison, by = results_comparison$team_names, FUN = mean)
team_aggregates <- aggregate(results_comparison, by = as.list(results_comparison$team_names), FUN = mean)
?aplit
?split
team_results <- split(results_comparison, results_comparison$team_names)
View(tournaments)
player_team_names_test <- tournaments[-train_indexes, 1:2]
View(player_team_names_test)
results_comparison <- results_comparison[,-3]
results_comparison <- data.frame(results_comparison,player_team_names_test)
View(results_comparison)
View(tournaments)
model1 <- train(as.factor(Tournament_Result)~. ,
data = train_data,
method = 'gbm',
trControl = fitControl,
verbose = T)
fitControl <- trainControl(method = 'repeatedcv',
number = 3,
repeats = 3)
model1 <- train(as.factor(Tournament_Result)~. ,
data = train_data,
method = 'gbm',
trControl = fitControl,
verbose = T)
tournaments$Tournament_Result <- as.factor(tournaments$Tournament_Result)
train_indexes <- createDataPartition(tournaments$Tournament_Result, p = .75, list = F)
train_data <- tournaments[train_indexes, -c(1,2)]
test_data <- tournaments[-train_indexes, -c(1,2)]
fitControl <- trainControl(method = 'repeatedcv',
number = 3,
repeats = 3)
model1 <- train(Tournament_Result~. ,
data = train_data,
method = 'gbm',
trControl = fitControl,
verbose = T)
model1
preds1 <- predict(model1, test_data[,-14])
actual_results <- test_data$Tournament_Result
results_comparison <- data.frame(actual_results, preds1)
View(results_comparison)
results_comparison$actual_results <- as.integer(results_comparison$actual_results)
results_comparison$preds1 <- as.integer(results_comparison$preds1)
qplot(results_comparison$preds1, results_comparison$actual_results)
player_team_names_test <- tournaments[-train_indexes, 1:2]
results_comparison <- data.frame(results_comparison,player_team_names_test)
View(results_comparison)
View(tournaments)
View(frankfurt)
View(scaled_tournaments)
View(scaled_frankfurt)
View(scaled_tournaments2)
